{
    "compilerOptions": {
        /* 請訪問 https://aka.ms/tsconfig 了解有關此文件的更多信息  */
        /* 項目 */
        // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允許對項目進行增量編譯。 */
        // "composite": true,                                /* 啟用約束，允許將 TypeScript 項目與項目引用一起使用。 */
        // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量編譯文件的路徑。 */
        // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用優先使用源文件而不是聲明文件的偏好選項，當引用復合項目時。 */
        // "disableSolutionSearching": true,                 /* 編輯時，取消對多項目引用檢查的項目的選擇。 */
        // "disableReferencedProjectLoad": true,             /* 減少 TypeScript 自動加載的項目數量。 */   
        /* 語言和環境 */
        "target": "ESNext", /* 設置發出的 JavaScript 的 JavaScript 語言版本，並包含相容的庫聲明。 */
        // "lib": [],                                        /* 指定一組捆綁的庫聲明文件，描述目標運行時環境。 */
        // "jsx": "preserve",                                /* 指定生成的 JSX 代碼。 */
        // "experimentalDecorators": true,                   /* 啟用對舊的實驗性裝飾器的實驗性支持。 */
        // "emitDecoratorMetadata": true,                    /* 在源文件中，對裝飾聲明發出設計類型元數據。 */
        // "jsxFactory": "",                                 /* 指定目標為 React JSX 發出時使用的 JSX 工廠函數，例如 'React.createElement' 或 'h'。 */
        // "jsxFragmentFactory": "",                         /* 指定目標為 React JSX 發出時用於碎片的 JSX Fragment 引用，例如 'React.Fragment' 或 'Fragment'。 */
        // "jsxImportSource": "",                            /* 使用 'jsx: react-jsx*' 時，指定用於導入 JSX 工廠函數的模塊導入符號。 */
        // "reactNamespace": "",                             /* 指定為 'createElement' 而調用的對象。這僅適用於目標為 'react' JSX 發出時。 */
        // "noLib": true,                                    /* 禁用包括任何庫文件，包括默認的 lib.d.ts。 */
        // "useDefineForClassFields": true,                  /* 發出符合 ECMAScript 標準的類字段。 */
        // "moduleDetection": "auto",                        /* 控制檢測模塊格式的 JS 文件使用的方法。 */
        /* 模塊 */
        "module": "ESNext", /* 指定生成的模塊代碼。 */
        "rootDir": "./source", /* 指定源文件中的根文件夾。 */
        "moduleResolution": "Node", /* 指定 TypeScript 如何從給定的模塊標識符中查找文件。 */
        // "baseUrl": "./",                                  /* 指定解析非相對模塊名的基本目錄。 */
        // "paths": {},                                      /* 指定一組將導入重新映射到其他查找位置的條目。 */
        // "rootDirs": [],                                   /* 在解析模塊時允許將多個文件夾視為一個。 */
        // "typeRoots": [],                                  /* 指定多個文件夾，它們的作用類似於 './node_modules/@types'。 */
        // "types": [],                                      /* 指定要包括但未在源文件中引用的類型包名。 */
        // "allowUmdGlobalAccess": true,                     /* 允許從模塊訪問 UMD 全局對象。 */
        // "moduleSuffixes": [],                             /* 解析模塊時要搜索的文件名後綴列表。 */
        // "allowImportingTsExtensions": true,               /* 允許導入包含 TypeScript 文件擴展名的文件。需要設置 '--moduleResolution bundler' 以及 '--noEmit' 或 '--emitDeclarationOnly'。 */
        // "resolvePackageJsonExports": true,                /* 解析包導入時使用 package.json 的 'exports' 字段。 */
        // "resolvePackageJsonImports": true,                /* 解析導入時使用 package.json 的 'imports' 字段。 */
        // "customConditions": [],                           /* 在解析導入時設置的額外條件，除了解析器特定的默認條件。 */
        // "resolveJsonModule": true,                        /* 啟用導入 .json 文件。 */
        // "allowArbitraryExtensions": true,                 /* 啟用導入具有任何擴展名的文件，前提是存在聲明文件。 */
        // "noResolve": true,                                /* 禁止 'import'、'require' 或 '<reference>' 將文件數量擴展到 TypeScript 應該添加到項目中的數量。 */
        /* JavaScript 支持 */
        // "allowJs": true,                                  /* 允許將 JavaScript 文件作為項目的一部分。使用 'checkJS' 選項從這些文件中獲取錯誤。 */
        // "checkJs": true,                                  /* 啟用對類型檢查的 JavaScript 文件的錯誤報告。 */
        // "maxNodeModuleJsDepth": 1,                        /* 指定用於從 'node_modules' 檢查 JavaScript 文件的最大文件夾深度。僅適用於 'allowJs'。 */
        /* 發出 */
        // "declaration": true,                              /* 從項目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
        // "declarationMap": true,                           /* 為 .d.ts 文件創建源映射。 */
        // "emitDeclarationOnly": true,                      /* 只輸出 .d.ts 文件，而不是 JavaScript 文件。 */
        // "sourceMap": true,                                /* 為發出的 JavaScript 文件創建源映射文件。 */
        // "inlineSourceMap": true,                          /* 在發出的 JavaScript 中包含 sourcemap 文件。 */
        // "outFile": "./",                                  /* 指定一個文件，將所有輸出捆綁為一個 JavaScript 文件。如果 'declaration' 為 true，也指定捆綁所有 .d.ts 輸出的文件。 */
        "outDir": "compile", /* 指定所有已發出文件的輸出文件夾。 */
        "removeComments": true, /* 禁止發出註釋。 */
        // "noEmit": true,                                   /* 禁止從編譯中發出文件。 */
        // "importHelpers": true,                            /* 允許在每個項目中一次從 tslib 引入幫助函數，而不是每個文件都引入一次。 */
        // "importsNotUsedAsValues": "remove",               /* 指定僅用於類型的導入的發出/檢查行為。 */
        // "downlevelIteration": true,                       /* 對於迭代，發出更符合規範但更冗長且性能較低的 JavaScript。 */
        // "sourceRoot": "",                                 /* 指定調試器尋找引用源代碼的根路徑。 */
        // "mapRoot": "",                                    /* 指定調試器應將映射文件定位到的位置，而不是生成的位置。 */
        // "inlineSources": true,                            /* 將源代碼包含在已發出的 JavaScript 中的 sourcemaps 中。 */
        "emitBOM": true, /* 在輸出文件的開頭發出 UTF-8 字節順序標記 (BOM)。 */
        // "newLine": "crlf",                                /* 設置發出文件的換行符。 */
        // "stripInternal": true,                            /* 禁止發出在其 JSDoc 註釋中具有 '@internal' 的聲明。 */
        // "noEmitHelpers": true,                            /* 禁止在編譯輸出中生成自定義幫助函數，例如 '__extends'。 */
        // "noEmitOnError": true,                            /* 如果報告了任何類型檢查錯誤，則禁止發出文件。 */
        // "preserveConstEnums": true,                       /* 禁止在生成的代碼中刪除 'const enum' 声明。 */
        // "declarationDir": "./",                           /* 指定生成聲明文件的輸出目錄。 */
        // "preserveValueImports": true,                     /* 在 JavaScript 輸出中保留未使用的導入值，否則將被刪除。 */
        /* 互操作約束 */
        // "isolatedModules": true,                          /* 確保每個文件可以安全地編譯，而不依賴於其他導入。 */
        // "verbatimModuleSyntax": true,                     /* 不要轉換或省略任何未標記為僅類型的導入或導出，確保它們按照 'module' 設置的輸出文件格式進行編寫。 */
        // "allowSyntheticDefaultImports": true,             /* 當模塊沒有默認導出時，允許 'import x from y'。 */
        "esModuleInterop": true, /* 發出額外的 JavaScript 以便更容易地支持導入 CommonJS 模塊。這會啟用 'allowSyntheticDefaultImports' 以實現類型兼容性。 */
        // "preserveSymlinks": true,                         /* 禁用將符號鏈接解析為它們的 realpath。這與 node 中的相同標誌相關。 */
        "forceConsistentCasingInFileNames": true, /* 確保導入中的大小寫正確。 */
        /* 類型檢查 */
        "strict": true, /* 啟用所有嚴格的類型檢查選項。 */
        "noImplicitAny": true, /* 啟用對具有隱含 'any' 類型的表達式和聲明的錯誤報告。 */
        "strictNullChecks": true, /* 在進行類型檢查時，考慮 'null' 和 'undefined'。 */
        // "strictFunctionTypes": true,                      /* 當分配函數時，檢查以確保參數和返回值是子類型兼容的。 */
        // "strictBindCallApply": true,                      /* 檢查 'bind'、'call' 和 'apply' 方法的參數是否與原始函數匹配。 */
        // "strictPropertyInitialization": true,             /* 檢查在構造函數中聲明但未設置的類屬性。 */
        "noImplicitThis": true, /* 當 'this' 被賦予 'any' 類型時啟用錯誤報告。 */
        // "useUnknownInCatchVariables": true,               /* 將默認的 catch 子句變量設置為 'unknown'，而不是 'any'。 */
        "alwaysStrict": true, /* 確保始終發出 'use strict'。 */
        // "noUnusedLocals": true,                           /* 當未讀取本地變量時啟用錯誤報告。 */
        // "noUnusedParameters": true,                       /* 當函數參數未被使用時引發錯誤。 */
        // "exactOptionalPropertyTypes": true,               /* 將可選屬性類型解釋為原始的寫法，而不是添加 'undefined'。 */
        // "noImplicitReturns": true,                        /* 對於在函數中未顯式返回的代碼路徑啟用錯誤報告。 */
        // "noFallthroughCasesInSwitch": true,               /* 對於 switch 語句中的穿透情況啟用錯誤報告。 */
        // "noUncheckedIndexedAccess": true,                 /* 在使用索引訪問時向類型添加 'undefined'。 */
        // "noImplicitOverride": true,                       /* 確保在派生類中覆蓋成員時標記為覆蓋修飾符。 */
        // "noPropertyAccessFromIndexSignature": true,       /* 強制使用索引訪問器來訪問使用索引類型聲明的鍵。 */
        // "allowUnusedLabels": true,                        /* 禁用對未使用標籤的錯誤報告。 */
        // "allowUnreachableCode": true,                     /* 禁用對不可達代碼的錯誤報告。 */
        /* 完整性 */
        // "skipDefaultLibCheck": true,                      /* 跳過與 TypeScript 一起包含的 .d.ts 文件的類型檢查。 */
        "skipLibCheck": true /* 跳過對所有 .d.ts 文件的類型檢查。 */
    },
    "include": [
        "./source/**/*"
    ],
    "exclude": [
        "./compile/**/*"
    ]
}